// Common library of things

var shared = {
  getCurrentFileName: function(doc) {
    return doc.fileURL().lastPathComponent();
  },
  getCurrentDirectory: function(doc) {
    return doc.fileURL().URLByDeletingLastPathComponent().path();
  },
  exec: function(command) {
    var task = NSTask.alloc().init();
    var pipe = NSPipe.pipe();
    var errPipe = NSPipe.pipe();

    task.setLaunchPath_(@"/bin/bash");
    task.setArguments_(NSArray.arrayWithObjects_("-c", "-l", command, nil));
    task.setStandardOutput_(pipe);
    task.setStandardError_(errPipe);
    task.launch();

    var data = errPipe.fileHandleForReading().readDataToEndOfFile();
    if (data != nil && data.length())
    {
      var message = NSString.alloc().initWithData_encoding_(data, NSUTF8StringEncoding);
      return NSException.raise_format_("failed", message);
    }
    data = pipe.fileHandleForReading().readDataToEndOfFile();
    return NSString.alloc().initWithData_encoding_(data, NSUTF8StringEncoding);
  },
  createInputWithCheckbox: function(msg, checkboxMsg, checked, okLabel, cancelLabel) {
    var accessory = NSView.alloc().initWithFrame(NSMakeRect(0,0,300,50));
    var input = NSTextField.alloc().initWithFrame(NSMakeRect(0,25,300,25));
    input.editable = true;
    var checkbox = NSButton.alloc().initWithFrame(NSMakeRect(0,0,300,25));
    checkbox.setButtonType(3);
    checkbox.title = checkboxMsg;
    checkbox.state = checked ? 1 : 0;
    accessory.addSubview(input);
    accessory.addSubview(checkbox);

    var alert = NSAlert.alloc().init();
    alert.setMessageText(msg);
    alert.addButtonWithTitle(okLabel || 'OK');
    alert.addButtonWithTitle(cancelLabel || 'Cancel');
    alert.setAccessoryView(accessory);

    var responseCode = alert.runModal();
    var message = input.stringValue();

    return {
      responseCode: responseCode,
      message: message,
      checked: checkbox.state() == 1
    };
  },
  createSelect: function(msg, items, selectedItemIndex, okLabel, cancelLabel) {
    selectedItemIndex = selectedItemIndex || 0;

    var accessory = NSComboBox.alloc().initWithFrame(NSMakeRect(0,0,200,25));
    accessory.addItemsWithObjectValues(items);
    accessory.selectItemAtIndex(selectedItemIndex);

    var alert = NSAlert.alloc().init();
    alert.setMessageText(msg);
    alert.addButtonWithTitle(okLabel || 'OK');
    alert.addButtonWithTitle(cancelLabel || 'Cancel');
    alert.setAccessoryView(accessory);

    var responseCode = alert.runModal();
    var sel = accessory.indexOfSelectedItem();

    return {
      responseCode: responseCode,
      index: sel
    };
  },
  getCurrentBranch: function(doc) {
    var path = this.getCurrentDirectory(doc);
    var currentBranchCommand = NSString.stringWithFormat_("\\cd \"%@\" && \\git rev-parse --abbrev-ref HEAD", path);
    var branch;
    try {
      branch = this.exec(currentBranchCommand).split('\n')[0];
    } catch (e) {
      branch = 'master';
    }
    return branch;
  },
  exportArtboards: function(doc) {
    var path = this.getCurrentDirectory(doc);
    var currentFileName = this.getCurrentFileName(doc);
    var currentFileNameWithoutExtension = currentFileName.replace(/\.sketch$/, '');
    var command = NSString.stringWithFormat_("\\cd \"%@\" && mkdir -p .exportedArtboards && rm -rf \".exportedArtboards/%@\" && mkdir \".exportedArtboards/%@\" && %@/Contents/Resources/sketchtool/bin/sketchtool export artboards \"%@\" --output=\".exportedArtboards/%@\" --overwriting=YES && git add .exportedArtboards", path, currentFileNameWithoutExtension, currentFileNameWithoutExtension, [[NSBundle mainBundle] bundlePath], currentFileName, currentFileNameWithoutExtension);
    return this.exec(command);
  },
  commit: function (doc) {
	var path = this.getCurrentDirectory(doc);
    var currentBranch = this.getCurrentBranch(doc);
    var commitMsg = this.createInputWithCheckbox('Commit to "' + currentBranch + '"', 'Generate files for pretty diffs', true, 'Commit');

    if (commitMsg.responseCode === 1000 && commitMsg.message !== nil) {
      if (commitMsg.checked) {
        this.exportArtboards(doc);
      }
      var command = NSString.stringWithFormat("\\cd \"%@\" && \\git commit -m '%@' -a; \\exit", path, commitMsg.message);
      var message = this.exec(command);
      doc.showMessage(message.split('\n').join(' '));
    }
  },
  push: function (doc) {
	var path = this.getCurrentDirectory(doc);

    var command = NSString.stringWithFormat_("\\cd \"%@\" && \\git push -q", path);
    var message = this.exec(command);
    doc.showMessage("Changes pushed");
  }
};
